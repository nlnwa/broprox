# Veidemann app for Kubernetes
kind: ConfigMap
apiVersion: v1
data:
  log4j2.xml: |-
    <?xml version="1.0" encoding="UTF-8"?>
    <Configuration status="WARN" monitorInterval="0">
        <Appenders>
            <Console name="Console" target="SYSTEM_OUT">
                <PatternLayout pattern="%d{yyyy-MM-dd'T'HH:mm:ss.SSSZ} [%thread] %-5level %logger{36} - %MDC %msg %ex{full}%n"/>
            </Console>
        </Appenders>
        <Loggers>
            <Logger name="no.nb.nna.veidemann" level="info" additivity="false">
                <AppenderRef ref="Console"/>
            </Logger>
            <Root level="error">
                <AppenderRef ref="Console"/>
            </Root>
        </Loggers>
    </Configuration>
metadata:
  name: log4j.conf
  labels:
    tier: backend
    role: config
---
# Harvester (proxy and browser)
apiVersion: v1
kind: Service
metadata:
  name: veidemann-harvester
  labels:
    app: harvester
    tier: backend
    role: worker
spec:
  ports:
  - name: harvester-api
    port: 9090
    targetPort: api
  - name: harvester-proxy
    port: 8080
    targetPort: proxy
  - name: browser-api
    port: 9222
    targetPort: debug
  selector:
    app: harvester
    tier: backend
    role: worker
  type: NodePort
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: veidemann-harvester
spec:
  template:
    metadata:
      labels:
        app: harvester
        tier: backend
        role: worker
    spec:
      containers:
      - name: browser
        image: norsknettarkiv/chrome-headless:64.0.3269.3
        ports:
        - name: debug
          containerPort: 9222
        env:
        - name: CHROME_OPTS
          value: "--proxy-server=localhost:8080 --ignore-certificate-errors --disable-web-security --allow-running-insecure-content"
          # --dbus-stub --deterministic-fetch
          # --disable-background-networking
        volumeMounts:
        - mountPath: /data
          name: workdir
        resources:
            requests:
                memory: "500Mi"
      - name: proxy
        image: norsknettarkiv/veidemann-harvester:1.0.0-SNAPSHOT
        ports:
        - name: proxy
          containerPort: 8080
        - name: api
          containerPort: 9090
        env:
        - name: BROWSER_HOST
          value: "localhost"
        - name: BROWSER_PORT
          value: "9222"
        - name: DB_HOST
          value: "rethink"
        - name: DB_PORT
          value: "28015"
        - name: CONTENT_WRITER_HOST
          value: "veidemann-contentwriter"
        - name: CONTENT_WRITER_PORT
          value: "8080"
        - name: DNS_RESOLVER_HOST
          value: "veidemann-dnsresolver"
        - name: DNS_RESOLVER_PORT
          value: "50052"
        volumeMounts:
        - mountPath: /workdir
          name: workdir
        - name: log4j-config
          mountPath: /veidemann-harvester/config/log4j2.xml
          subPath: log4j2.xml
        resources:
            requests:
                memory: "500Mi"
      - image: jaegertracing/jaeger-agent:0.9.0
        name: jaeger-agent
        ports:
        - containerPort: 5775
          protocol: UDP
        - containerPort: 5778
        - containerPort: 6831
          protocol: UDP
        - containerPort: 6832
          protocol: UDP
        command:
        - "/go/bin/agent-linux"
        - "--collector.host-port=jaeger-collector.tracing:14267"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      volumes:
      - emptyDir: {}
        name: workdir
      - name: log4j-config
        configMap:
          name: log4j.conf
---
# Content writer
apiVersion: v1
kind: Service
metadata:
  name: veidemann-contentwriter
  labels:
    app: contentwriter
    tier: backend
    role: worker
spec:
  ports:
  - name: api
    port: 8080
    targetPort: 8080
    nodePort: 31575
  - name: explorer
    port: 8081
    targetPort: 8081
    nodePort: 31576
  selector:
    app: contentwriter
    tier: backend
    role: worker
  type: NodePort
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: veidemann-contentwriter
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: contentwriter
        tier: backend
        role: worker
    spec:
      containers:
      - name: contentwriter
        image: norsknettarkiv/veidemann-contentwriter:1.0.0-SNAPSHOT
        ports:
        - containerPort: 8080
        env:
        - name: DB_HOST
          value: "rethink"
        - name: DB_PORT
          value: "28015"
        volumeMounts:
        - mountPath: /workdir
          name: workdir
        - mountPath: /warcs
          name: warcs
        - name: log4j-config
          mountPath: /veidemann-contentwriter/config/log4j2.xml
          subPath: log4j2.xml
        resources:
            requests:
                memory: "1Gi"
      - name: contentexplorer
        image: norsknettarkiv/veidemann-contentexplorer:1.0.0-SNAPSHOT
        ports:
        - containerPort: 8081
        env:
        - name: DB_HOST
          value: "rethink"
        - name: DB_PORT
          value: "28015"
        volumeMounts:
        - mountPath: /workdir
          name: workdir
        - mountPath: /warcs
          name: warcs
        - name: log4j-config
          mountPath: /veidemann-contentwriter/config/log4j2.xml
          subPath: log4j2.xml
      - image: jaegertracing/jaeger-agent:0.9.0
        name: jaeger-agent
        ports:
        - containerPort: 5775
          protocol: UDP
        - containerPort: 5778
        - containerPort: 6831
          protocol: UDP
        - containerPort: 6832
          protocol: UDP
        command:
        - "/go/bin/agent-linux"
        - "--collector.host-port=jaeger-collector.tracing:14267"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      volumes:
      - emptyDir: {}
        name: workdir
      - name: warcs
        persistentVolumeClaim:
          claimName: warc-data-claim
      - name: log4j-config
        configMap:
          name: log4j.conf

---
# Frontier
apiVersion: v1
kind: Service
metadata:
  name: veidemann-frontier
  labels:
    app: frontier
    tier: backend
    role: worker
spec:
  ports:
  - name: api
    port: 7700
    targetPort: 7700
  selector:
    app: frontier
    tier: backend
    role: worker
  type: NodePort
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: veidemann-frontier
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: frontier
        tier: backend
        role: worker
    spec:
      containers:
      - name: frontier
        image: norsknettarkiv/veidemann-frontier:1.0.0-SNAPSHOT
        ports:
        - containerPort: 7700
        env:
        - name: DB_HOST
          value: "rethink"
        - name: DB_PORT
          value: "28015"
        - name: HARVESTER_HOST
          value: "veidemann-harvester"
        - name: HARVESTER_PORT
          value: "9090"
        - name: ROBOTS_EVALUATOR_HOST
          value: "veidemann-robots"
        - name: ROBOTS_EVALUATOR_PORT
          value: "50052"
        - name: DNS_RESOLVER_HOST
          value: "veidemann-dnsresolver"
        - name: DNS_RESOLVER_PORT
          value: "50052"
        volumeMounts:
        - mountPath: /workdir
          name: workdir
        - name: log4j-config
          mountPath: /veidemann-frontier/config/log4j2.xml
          subPath: log4j2.xml
      - image: jaegertracing/jaeger-agent:0.9.0
        name: jaeger-agent
        ports:
        - containerPort: 5775
          protocol: UDP
        - containerPort: 5778
        - containerPort: 6831
          protocol: UDP
        - containerPort: 6832
          protocol: UDP
        command:
        - "/go/bin/agent-linux"
        - "--collector.host-port=jaeger-collector.tracing:14267"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      volumes:
      - emptyDir: {}
        name: workdir
      - name: log4j-config
        configMap:
          name: log4j.conf

---
# Controller
apiVersion: v1
kind: Service
metadata:
  name: veidemann-controller
  labels:
    app: controller
    tier: backend
    role: master
spec:
  ports:
  - name: api
    port: 50051
    targetPort: 50051
    nodePort: 30891
  selector:
    app: controller
    tier: backend
    role: master
  type: NodePort
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: veidemann-controller
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: controller
        tier: backend
        role: master
    spec:
      containers:
      - name: controller
        image: norsknettarkiv/veidemann-controller:1.0.0-SNAPSHOT
        ports:
        - containerPort: 50051
        env:
        - name: DB_HOST
          value: "rethink"
        - name: DB_PORT
          value: "28015"
        - name: FRONTIER_HOST
          value: "veidemann-frontier"
        - name: FRONTIER_PORT
          value: "7700"
        - name: OPENID_CONNECT_ISSUER
          valueFrom:
            configMapKeyRef:
              name: veidemann-config
              key: openid.connect.issuer
        volumeMounts:
        - name: log4j-config
          mountPath: /veidemann-controller/config/log4j2.xml
          subPath: log4j2.xml
      - image: jaegertracing/jaeger-agent:0.9.0
        name: jaeger-agent
        ports:
        - containerPort: 5775
          protocol: UDP
        - containerPort: 5778
        - containerPort: 6831
          protocol: UDP
        - containerPort: 6832
          protocol: UDP
        command:
        - "/go/bin/agent-linux"
        - "--collector.host-port=jaeger-collector.tracing:14267"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      volumes:
      - name: log4j-config
        configMap:
          name: log4j.conf

---
# Veidemann Robots honoring service
apiVersion: v1
kind: Service
metadata:
  name: veidemann-robots
  labels:
    app: robots
    tier: backend
    role: worker
spec:
  ports:
  - name: api
    port: 50052
    targetPort: 50052
  selector:
    app: robots
    tier: backend
    role: worker
  type: NodePort
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: veidemann-robots
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: robots
        tier: backend
        role: worker
    spec:
      containers:
      - name: robots
        image: norsknettarkiv/veidemann-robotsevaluator-service:1.0.0-SNAPSHOT
        ports:
        - containerPort: 50052
        env:
        - name: DB_HOST
          value: "rethink"
        - name: DB_PORT
          value: "28015"
        - name: PROXY_HOST
          value: "veidemann-harvester"
        - name: PROXY_PORT
          value: "8080"
        volumeMounts:
        - name: log4j-config
          mountPath: /veidemann-robotsevaluator-service/config/log4j2.xml
          subPath: log4j2.xml
      - image: jaegertracing/jaeger-agent:0.9.0
        name: jaeger-agent
        ports:
        - containerPort: 5775
          protocol: UDP
        - containerPort: 5778
        - containerPort: 6831
          protocol: UDP
        - containerPort: 6832
          protocol: UDP
        command:
        - "/go/bin/agent-linux"
        - "--collector.host-port=jaeger-collector.tracing:14267"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      volumes:
      - name: log4j-config
        configMap:
          name: log4j.conf

---
# Veidemann DNS resolver service
apiVersion: v1
kind: Service
metadata:
  name: veidemann-dnsresolver
  labels:
    app: dnsresolver
    tier: backend
    role: worker
spec:
  ports:
  - name: api
    port: 50052
    targetPort: 50052
  selector:
    app: dnsresolver
    tier: backend
    role: worker
  type: NodePort
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: veidemann-dnsresolver
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: dnsresolver
        tier: backend
        role: worker
    spec:
      containers:
      - name: robots
        image: norsknettarkiv/veidemann-dnsresolver:1.0.0-SNAPSHOT
        ports:
        - containerPort: 50052
        env:
        - name: DB_HOST
          value: "rethink"
        - name: DB_PORT
          value: "28015"
        - name: CONTENT_WRITER_HOST
          value: "veidemann-contentwriter"

        - name: CONTENT_WRITER_PORT
          value: "8080"
        - name: DNS_SERVER
          value: "8.8.8.8"
        volumeMounts:
        - name: log4j-config
          mountPath: /veidemann-dnsresolver/config/log4j2.xml
          subPath: log4j2.xml
      - image: jaegertracing/jaeger-agent:0.9.0
        name: jaeger-agent
        ports:
        - containerPort: 5775
          protocol: UDP
        - containerPort: 5778
        - containerPort: 6831
          protocol: UDP
        - containerPort: 6832
          protocol: UDP
        command:
        - "/go/bin/agent-linux"
        - "--collector.host-port=jaeger-collector.tracing:14267"
      restartPolicy: Always
      dnsPolicy: ClusterFirst
      volumes:
      - name: log4j-config
        configMap:
          name: log4j.conf

---
# API Gateway
apiVersion: v1
kind: Service
metadata:
  name: veidemann-api-gateway
  labels:
    app: api-gateway
    tier: frontend
    role: api-gateway
spec:
  ports:
  - port: 3010
    targetPort: 3010
  selector:
    app: api-gateway
    tier: frontend
    role: api-gateway
  type: NodePort
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: veidemann-api-gateway
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: api-gateway
        tier: frontend
        role: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: norsknettarkiv/veidemann-api-gateway
        ports:
        - containerPort: 3010
        env:
        - name: GRPC_CONTROLLER
          value: "veidemann-controller:50051"
      restartPolicy: Always
      dnsPolicy: ClusterFirst

---
# Admin GUI
apiVersion: v1
kind: Service
metadata:
  name: veidemann-admin
  labels:
    app: admin
    tier: frontend
    role: admin
spec:
  ports:
  - name: gui
    port: 80
    targetPort: 80
    nodePort: 30890
  selector:
    app: admin
    tier: frontend
    role: admin
  type: NodePort
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: veidemann-admin
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: admin
        tier: frontend
        role: admin
    spec:
      containers:
      - name: admin
        image: norsknettarkiv/veidemann-gui
        ports:
        - containerPort: 80
        env:
        - name: PROXY_ADDR
          value: "veidemann-api-gateway:3010"
        - name: OPENID_CONNECT_ISSUER
          valueFrom:
            configMapKeyRef:
              name: veidemann-config
              key: openid.connect.issuer
      restartPolicy: Always
      dnsPolicy: ClusterFirst
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: warc-data-claim
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  selector:
    matchLabels:
      usage: "warc"
