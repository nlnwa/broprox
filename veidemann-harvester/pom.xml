<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>no.nb.nna</groupId>
        <artifactId>veidemann</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>

    <artifactId>veidemann-harvester</artifactId>
    <packaging>jar</packaging>

    <properties>
    </properties>

    <dependencies>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>veidemann-dbadapter</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>veidemann-chrome-client</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>veidemann-commons</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.netpreserve.commons</groupId>
            <artifactId>webarchive-commons-uri</artifactId>
        </dependency>
        <dependency>
            <groupId>org.netpreserve.commons</groupId>
            <artifactId>webarchive-commons-util</artifactId>
        </dependency>
        <dependency>
            <groupId>org.littleshoot</groupId>
            <artifactId>littleproxy</artifactId>
        </dependency>
        <dependency>
            <groupId>net.lightbody.bmp</groupId>
            <artifactId>mitm</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>
        <dependency>
            <groupId>io.netty</groupId>
            <artifactId>netty-all</artifactId>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-netty-shaded</artifactId>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>

        <dependency>
            <groupId>org.cache2k</groupId>
            <artifactId>cache2k-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.cache2k</groupId>
            <artifactId>cache2k-all</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Configuration framework -->
        <dependency>
            <groupId>com.typesafe</groupId>
            <artifactId>config</artifactId>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- Make version number available for application -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.0.2</version>
                <configuration>
                    <archive>
                        <manifest>
                            <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>

            <plugin>
                <groupId>io.fabric8</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>docker-build</id>
                    </execution>
                </executions>
            <configuration>
                <images>
                    <image>
                        <name>norsknettarkiv/${project.artifactId}</name>
                        <alias>harvester</alias>
                        <run><skip>true</skip></run>
                        <build>
                            <from>${docker.java.image}</from>
                            <maintainer>National Library of Norway</maintainer>
                            <tags>
                                <tag>${docker.tag}</tag>
                            </tags>
                            <runCmds>
                                <run>apk add --no-cache su-exec openssl libuuid</run>
                                <run>mkdir /workdir</run>
                            </runCmds>
                            <volumes>
                                <volume>/workdir</volume>
                            </volumes>
                            <env>
                                <WORK_DIR>/workdir</WORK_DIR>
                                <!--<CACHE_HOST></CACHE_HOST>-->
                            </env>
                            <ports>
                                <port>8080</port>
                                <port>9090</port>
                            </ports>
                            <!--<user>operator</user>-->
                            <cmd>
                                <exec>
                                    <!--<arg>/veidemann/bin/${project.artifactId}</arg>-->
                                    <arg>/veidemann/bin/start.sh</arg>
                                </exec>
                            </cmd>
                            <assembly>
                                <targetDir>/veidemann</targetDir>

                                <inline>
                                    <includeBaseDirectory>true</includeBaseDirectory>
                                    <fileSets>
                                        <fileSet>
                                            <directory>target/appassembler/bin</directory>
                                            <outputDirectory>bin</outputDirectory>
                                            <includes>
                                                <include>${project.artifactId}</include>
                                                <include>start.sh</include>
                                            </includes>
                                            <fileMode>0755</fileMode>
                                        </fileSet>
                                        <fileSet>
                                            <directory>target/appassembler/bin</directory>
                                            <outputDirectory>bin</outputDirectory>
                                            <excludes>
                                                <exclude>${project.artifactId}</exclude>
                                                <exclude>start.sh</exclude>
                                            </excludes>
                                            <fileMode>0644</fileMode>
                                        </fileSet>
                                        <fileSet>
                                            <directory>target/appassembler</directory>
                                            <outputDirectory>/</outputDirectory>
                                            <excludes>
                                                <exclude>bin</exclude>
                                            </excludes>
                                        </fileSet>
                                    </fileSets>
                                    <files>
                                        <file>
                                            <source>../LICENSE</source>
                                            <outputDirectory></outputDirectory>
                                            <fileMode>0644</fileMode>
                                        </file>
                                    </files>
                                </inline>
                            </assembly>
                        </build>
                    </image>
                    <image>
                        <name>norsknettarkiv/testsites</name>
                        <alias>testsites</alias>
                        <run>
                            <ports>
                                <port>+test.http.host:test.http.port:80</port>
                                <port>+test.dns.host:test.dns.port:53</port>
                            </ports>
                            <log>
                                <enabled>false</enabled>
                            </log>
                            <wait>
                                <tcp>
                                    <mode>mapped</mode>
                                    <ports>
                                        <port>80</port>
                                        <port>53</port>
                                    </ports>
                                </tcp>
                                <time>20000</time>
                            </wait>
                        </run>
                    </image>
                    <image>
                        <name>browserless/chrome:release-puppeteer-1.5.0</name>
                        <alias>browser</alias>
                        <run>
                            <namingStrategy>alias</namingStrategy>
                            <network>
                                <mode>custom</mode>
                                <name>cdp-test-net</name>
                                <alias>browser</alias>
                            </network>
                            <ports>
                                <port>+browser.host:browser.port:3000</port>
                            </ports>
                            <env>
                                <CHROME_OPTS>--hide-scrollbars --disable-dev-shm-usage</CHROME_OPTS>
                            </env>
                            <!-- 1GB -->
                            <memory>1073741824</memory>
                            <shmSize>1073741824</shmSize>
                            <log>
                                <enabled>true</enabled>
                            </log>
                            <dns>
                                <host>${docker.container.testsites.net.cdp-test-net.ip}</host>
                                <!--<host>8.8.8.8</host>-->
                            </dns>
                        </run>
                    </image>
                </images>
            </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>docker-build</id>
            <build>
                <plugins>
                    <!-- Create assembly with startup scripts and dependencies -->
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>appassembler-maven-plugin</artifactId>
                        <configuration>
                            <licenseHeaderFile>${basedir}/../src/main/etc/license-header.txt</licenseHeaderFile>
                            <programs>
                                <program>
                                    <mainClass>no.nb.nna.veidemann.harvester.Main</mainClass>
                                    <id>${project.artifactId}</id>
                                </program>
                            </programs>
                            <binFolder>bin</binFolder>
                            <repositoryName>lib</repositoryName>
                            <repositoryLayout>flat</repositoryLayout>
                            <useWildcardClassPath>true</useWildcardClassPath>
                            <configurationDirectory>config</configurationDirectory>
                            <endorsedDir>plugins</endorsedDir>
                            <preAssembleDirectory>src/main/distfiles</preAssembleDirectory>
                            <extraJvmArguments>-Dconfig.file=@BASEDIR@/config/application.conf -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap</extraJvmArguments>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>assemble</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>

                    <!-- Build Docker image -->
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>docker-build</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>integration-tests</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.gmaven</groupId>
                        <artifactId>groovy-maven-plugin</artifactId>
                        <version>2.0</version>
                        <executions>
                            <execution>
                                <phase>generate-resources</phase>
                                <goals>
                                    <goal>execute</goal>
                                </goals>
                                <configuration>
                                    <source>
                                        def proc = 'id -u'.execute()
                                        proc.waitForOrKill(1000)
                                        if (proc.exitValue()) {
                                            def err = new StringBuffer()
                                            proc.consumeProcessErrorStream(err)
                                            throw new RuntimeException("ERROR: " + err.toString())
                                        }
                                        project.properties.uid = proc.text.trim()

                                        new File('${project.build.directory}/it-workdir/certificates').mkdirs()
                                    </source>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>build-helper-maven-plugin</artifactId>
                        <version>3.0.0</version>
                        <executions>
                            <execution>
                                <id>get-local-ip</id>
                                <goals>
                                    <goal>local-ip</goal>
                                </goals>
                                <configuration>
                                    <localIpProperty>proxy.ip</localIpProperty>
                                </configuration>
                            </execution>
                            <execution>
                                <id>reserve-network-port</id>
                                <goals>
                                    <goal>reserve-network-port</goal>
                                </goals>
                                <phase>process-resources</phase>
                                <configuration>
                                    <portNames>
                                        <portName>proxy.port</portName>
                                    </portNames>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>prepare-tests</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>remove-tests</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                                <configuration>
                                    <removeVolumes>true</removeVolumes>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>integration-test</goal>
                                    <goal>verify</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <systemPropertyVariables>
                                <browser.host>${browser.host}</browser.host>
                                <browser.port>${browser.port}</browser.port>
                                <proxy.host>${proxy.ip}</proxy.host>
                                <proxy.port>${proxy.port}</proxy.port>
                                <testsites.http.host>${test.http.host}</testsites.http.host>
                                <testsites.http.port>${test.http.port}</testsites.http.port>
                                <testsites.dns.host>${test.dns.host}</testsites.dns.host>
                                <testsites.dns.port>${test.dns.port}</testsites.dns.port>
                            </systemPropertyVariables>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
